#+title: JavaScript Calculator

* User Stories
  - [ ] I can add, subtract, multiply and divide two numbers
  - [ ] I can clear the input field with a clear button
  - [ ] I can keep chaining mathematical operations together until I
    hit the equal button and the calculator will tell me the correct
    output.

* Resources
  - [[https://forum.freecodecamp.com/search?q%3Djavascript%2520calculator][freeCodeCamp Forums for JavaScript Calculator]]
  - [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval][MDN: eval()]]

* Notes
  - The temptation would be to use eval() for the calculation, but I'm
    leaning against it.  eval() can be dangerous, and it would be
    interesting to develop the logic for a simple 4-function
    calculator.

* Setting up
* Parsing
  - [[https://www.youtube.com/watch?v%3D9jSSSE2FuLU][ACTalk: Intro to Grammar and Parsing using the Recursive Descent algorithm]]

    BNF for arithmetic expression w/precedence:

    #+begin_example
    expr : term (('+' | '-') term)*
    term : factor (('*' | '/') factor)*
    factor : NUMBER | '(' expr ')'
    #+end_example

  - [[http://blog.erezsh.com/how-to-write-a-calculator-in-50-python-lines-without-eval/][How to Write a Calculator in 50 Python Lines (using PlyPlus)]]
  - [[http://blog.erezsh.com/how-to-write-a-calculator-in-70-python-lines-by-writing-a-recursive-descent-parser/][How to write a calculator in 70 Python lines]]
  - [[https://www.usna.edu/Users/cs/lmcdowel/courses/si413/F10/classes/L09/rdmod/Explain.html][Recursive Descent Simple Calculator Explained]]
  - [[https://www.youtube.com/watch?v%3DN55XNj8KjC4][Let's write a recursive descent parser in C]]
  - [[https://en.wikipedia.org/wiki/Recursive_descent_parser][Wikipedia: Recursive Descent Parser]]
